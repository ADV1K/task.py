from typing import Any, Optional, Protocol, Self, runtime_checkable

from task_tracker import Task, TaskList, TaskUpdate


@runtime_checkable
class TaskStorageProtocol(Protocol):
    def list_tasks(self) -> TaskList: ...
    def load_task(self, task_id: str) -> Optional[Task]: ...
    def save_task(self, task: Task) -> None: ...
    def delete_task(self, task_id: str) -> None: ...
    def update_task(self, task_id: str, updates: TaskUpdate) -> None: ...
    def mark_completed(self, task_id: str) -> None: ...

    def cleanup(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
